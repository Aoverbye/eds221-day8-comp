---
title: "EDS 221: day 8 interactive session"
author: "Amanda Overbye"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---
```{r}
library("tidyverse")
library("here")
library("janitor")
```

```{r}
install.packages("patchwork")
install.packages("ggrepel")
install.packages("gghighlight")
install.packages("paletteer")
install.packages("ggExtra")
install.packages("ggbeeswarm")

```

```{r}
library(patchwork)
library(ggrepel)
library(gghighlight)
library(paletteer)
library(ggExtra)
library(ggbeeswarm)
```

```{r}
lizards <- read_csv(here("data_tidy", "lizards.csv"))
```

```{r}
#different order of geom and ggplot ----
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  geom_line()

ggplot(data = lizards) +
  geom_point(aes(x = total_length, y = weight, color = total_length))

ggplot() +
  geom_point(data = lizards, aes(x = total_length, y = weight, color = "red"))

```

```{r}
#histogram ----
ggplot(data = lizards, aes(x = total_length)) +
  geom_histogram()
```

```{r}
#jitter plot
ggplot(data = lizards, aes(y = common_name, x = weight, color = common_name)) +
  geom_jitter()
```

```{r}
#when you dont need aes ?? because of constant point
ggplot(data = lizards, aes(x = weight)) +
  geom_histogram(color = "orange", 
                 fill = "purple",
                 linewidth = 2,
                 linetype = "dashed")
```

```{r}
#colors, alpha is transperency
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point( color = "#DDC3D0",
              fill = "3E92CC",
              shape = 22,
              size = 3,
              alpha = 0.5)
```

```{r}
#updating aes based on variable
#changing pallets
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name, 
                 size = total_length), 
             alpha = 0.5) +
  scale_color_discrete(type = c("#780000",
                                  "#e9c46a",
                                  "#f4acb7",
                                  "#a7c957",
                                  "#d62828",
                                  "#3c6e71",
                                  "#90a955"))
  #scale_color_brewer(palette = "Set3")
#changing default pallets, scale changes display
  #discrete to make your own colors by using color vector
```

```{r}
#different themes, minimal is white
#theme void takes away everything
ggplot(data = lizards, aes(x = site, y = weight))+
  geom_jitter(aes(color = common_name)) +
  theme_light()
```

```{r}
#Updating your labels
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point()+
  labs(x = "total length(mm)",
       y = "Weight (grams)",
       title = "Lizard size")
```

```{r}
#facets/ a bunch of different graphs / a pannel
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  facet_wrap(~common_name, ncol = 3, scales = "free") +
  labs(x = "Total length (mm)",
       y = "Weight (grams)")
#without scale free it will plot all graphs in the same axis range
```

```{r}
#faceting two things with facet grid ----
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  facet_grid(sex ~ tail)
```

```{r}
#gg plot likes being alphabetical
#making ggplot not label things alphabetically ----
#geom col is bar chart
#column names are factors
lizards_counts <- lizards |>
  count(common_name)

ggplot(data = lizards_counts, aes(y = fct_reorder(common_name, n), x = n)) +
  geom_col()
```

```{r}
#labeling, shaping, facet_wrapping
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name, shape = common_name),
             size = 2)+
  theme_minimal() +
  labs(x = "Total Length (mm)",
       y = "Weight (grams)",
       color = "Lizard species") +
  facet_wrap(~common_name, scales = "free")
```

```{r}
ggplot(data = lizards, aes(y = fct_infreq(common_name))) +
  geom_bar(aes(fill = site)) +
  theme_minimal() +
  labs(x = "Lizard counts",
       y = "Species (Common names)") +
  facet_grid(sex ~ tail)

#theme, panel labels?
```


```{r}
#continous data ----
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point()+
  scale_x_continuous(breaks = c(0, 250, 500),
                     limits = c(0, 500)) +
  scale_y_continuous(breaks = seq(from = 0, to = 70, by = 10),
                     limits = c(0,70)) +
  theme_linedraw()
```

```{r}
lizards_counts <- lizards |>
  mutate(date = lubridate::mdy(date)) |>
  count(date)
```

```{r}
ggplot(data = lizards_counts, aes(x = date, y = n)) +
  geom_line() +
 scale_x_date(breaks = scales::breaks_width("3 years"),
              # See date_breaks for next year!
               labels = scales::label_date("'%y")) + 
  # See date_labels for next year!
  scale_y_log10(labels = scales::label_scientific())
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = total_length)) +
  scale_color_steps2(low = "green", mid = "yellow", high = "red", midpoint = 150,
                     breaks = c(50, 75, 150, 180, 220, 280))
  #scale_color_steps(low = "red", high = "black")
  #scale_color_gradientn(colors = c("orange", "red","purple", "navy", "black"))
  #scale_color_gradient(low = "red", high = "black")
```

```{r}
p <- ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point()

p +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major = element_line(color = "lightgray"),
        plot.background = element_rect("orange"),
        text = element_text(size = 18, family = "serif"),
        axis.text.x = element_text(color = "yellow"),
        axis.text.y = element_text("lightyel"),
        panel.background = element_rect(color = "purple", fill = "lightgreen"))

```

```{r}
p +
  geom_hline(yintercept = mean(lizards$weight), color = "red", linetype = "dashed") +
  geom_vline(xintercept = 100, color = "maroon")+
  annotate("text", x = 100, y = 50, label = "LIZARD", color = "purple")+
  annotate("text", x = 350, y = mean(lizards$weight), label = "mean weight")
```

```{r}
#full nice looking graph ----
mono <- read_csv(here("data_tidy", "mono.csv"))

ggplot(data = mono, aes(x = year, y = lake_level)) +
  geom_rect(aes(xmin = 1941,
                xmax = 1983,
                ymin = 6350,
                ymax = 6440),
            fill = "gray90", alpha = 0.1) +
  geom_line() +
  labs(x = "Year",
       y = "Lake Surface Level\n(feet above sea level)\n",
       title = "Mono Lake (1850 - 2017)",
       caption = "Data: Mono Basin Clearinghouse") +
  scale_y_continuous(limits = c(6350, 6440),
                     breaks = c(6370, 6400, 6430),
                     labels = scales::label_comma())+
  scale_x_continuous(limits = c(1850, 2020),
                     breaks = seq(1850, 2010, 20),
                     expand = c(0,0))+
  geom_hline(yintercept = 6360, linetype = "dashed") +
  annotate("text", x = 1910, y = 6370,
           label = "Decreased shrimp abundance expected\n(6,360, feet above sea level)") +
  annotate("text", x = 1962, y = 6425,
           label = "unrestricted diversion\n(1981 - 1943)\n",
           size = 3) +
  theme_minimal()
```

